--- a/include/net/netfilter/nf_flow_table.h
+++ b/include/net/netfilter/nf_flow_table.h
@@ -190,9 +190,12 @@ struct flow_offload {
 #define FLOW_OFFLOAD_PATH_VLAN          BIT(1)
 #define FLOW_OFFLOAD_PATH_PPPOE         BIT(2)
 #define FLOW_OFFLOAD_PATH_DSA           BIT(3)
+#define FLOW_OFFLOAD_PATH_DSLITE	BIT(4)
+#define FLOW_OFFLOAD_PATH_6RD		BIT(5)
 
 struct flow_offload_hw_path_t {
 	struct net_device *dev;
+	struct net_device *virt_dev;
 	u32 flags;
 
 	u8 eth_src[ETH_ALEN];
--- a/net/8021q/vlan_dev.c
+++ b/net/8021q/vlan_dev.c
@@ -1069,6 +1069,7 @@ static int vlan_dev_flow_offload_check(f
         path->flags |= FLOW_OFFLOAD_PATH_VLAN;
 	path->vlan_proto = vlan->vlan_proto;
 	path->vlan_id = vlan->vlan_id;
+	path->virt_dev = dev;
 	path->dev = vlan->real_dev;
 
         if (vlan->real_dev->netdev_ops->ndo_flow_offload_check)
--- a/net/ipv6/ip6_tunnel.c
+++ b/net/ipv6/ip6_tunnel.c
@@ -57,6 +57,9 @@
 #include <net/netns/generic.h>
 #include <net/dst_metadata.h>
 
+#include <linux/netfilter.h>
+#include <net/netfilter/nf_flow_table.h>
+
 MODULE_AUTHOR("Ville Nuorvala");
 MODULE_DESCRIPTION("IPv6 tunneling device");
 MODULE_LICENSE("GPL");
@@ -1933,6 +1936,21 @@ int ip6_tnl_get_iflink(const struct net_
 }
 EXPORT_SYMBOL(ip6_tnl_get_iflink);
 
+
+static int ipip6_dev_flow_offload_check(struct flow_offload_hw_path_t *path)
+{
+	struct net_device *dev = path->dev;
+	struct ip6_tnl *tnl = netdev_priv(dev);
+
+	if (path->flags & FLOW_OFFLOAD_PATH_DSLITE)
+		return -EEXIST;
+
+	path->flags |= FLOW_OFFLOAD_PATH_DSLITE;
+	path->dev = tnl->dev;
+
+	return 0;
+}
+
 int ip6_tnl_encap_add_ops(const struct ip6_tnl_encap_ops *ops,
 			  unsigned int num)
 {
@@ -1994,6 +2012,7 @@ static const struct net_device_ops ip6_t
 	.ndo_change_mtu = ip6_tnl_change_mtu,
 	.ndo_get_stats64 = dev_get_tstats64,
 	.ndo_get_iflink = ip6_tnl_get_iflink,
+	.ndo_flow_offload_check = ipip6_dev_flow_offload_check,
 };
 
 #define IPXIPX_FEATURES (NETIF_F_SG |		\
--- a/net/ipv6/sit.c
+++ b/net/ipv6/sit.c
@@ -52,6 +52,9 @@
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
 
+#include <linux/netfilter.h>
+#include <net/netfilter/nf_flow_table.h>
+
 /*
    This version of net/ipv6/sit.c is cloned of net/ipv4/ip_gre.c
 
@@ -1393,6 +1396,21 @@ ipip6_tunnel_siocdevprivate(struct net_d
 	}
 }
 
+
+static int ipip6_dev_flow_offload_check(struct flow_offload_hw_path_t *path)
+{
+	struct net_device *dev = path->dev;
+	struct ip_tunnel *tnl = netdev_priv(dev);
+
+	if (path->flags & FLOW_OFFLOAD_PATH_6RD)
+		return -EEXIST;
+
+	path->flags |= FLOW_OFFLOAD_PATH_6RD;
+	path->dev = tnl->dev;
+
+	return 0;
+}
+
 static const struct net_device_ops ipip6_netdev_ops = {
 	.ndo_init	= ipip6_tunnel_init,
 	.ndo_uninit	= ipip6_tunnel_uninit,
@@ -1401,6 +1419,7 @@ static const struct net_device_ops ipip6
 	.ndo_get_stats64 = dev_get_tstats64,
 	.ndo_get_iflink = ip_tunnel_get_iflink,
 	.ndo_tunnel_ctl = ipip6_tunnel_ctl,
+	.ndo_flow_offload_check = ipip6_dev_flow_offload_check,
 };
 
 static void ipip6_dev_free(struct net_device *dev)
